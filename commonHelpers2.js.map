{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["import iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\n\n// const formRef = document.querySelector('.form');\n\n// formRef.addEventListener('submit', onBtnSubmit);\n\n// function onBtnSubmit(event) {\n//   event.preventDefault();\n\n//   const { elements: { delay, step, amount} } = event.currentTarget;\n//   const dataForm = {\n//     delay: Number(delay.value),\n//     step: Number(step.value),\n//     amount: Number(amount.value)\n//   };\n\n//   if (dataForm.delay < 0 || dataForm.step < 0 || dataForm.amount < 0) {\n//       return\n//     //   Notify.failure('Please, enter positive values', {\n//     //   width: '400px',\n//     //   position: 'center-center',\n//     //   fontSize: '28px',\n//     //   clickToClose: true\n//     // });\n//   };\n\n//   let delayPromise = dataForm.delay;\n//   for (let position = 1; position <= dataForm.amount; position++) {\n//     createPromise(position, delayPromise)\n//       .then(({ position, delayPromise }) => {\n//         // Notify.success(`✅ Fulfilled promise ${position} in ${delayPromise}ms`, {\n//         //   width: '400px',\n//         //   timeout: 4000,\n//         //   position: 'center-center',\n//         //   fontSize: '28px',\n//         //   clickToClose: true\n//           // });\n//           iziToast.success({\n//             title: '✅ Fulfilled promise',\n//             message: `Затримка: ${delayPromise}мс`,\n//           });\n//       })\n//       .catch(({position, delayPromise}) => {\n//         Notify.failure(`❌ Rejected promise ${position} in ${delayPromise}ms`, {\n//           width: '400px',\n//           timeout: 4000,\n//           position: 'center-center',\n//           fontSize: '28px',\n//           clickToClose: true\n//         });\n//       });\n//     delayPromise += dataForm.step;\n//   };\n\n//   event.currentTarget.reset();\n// };\n\n// function createPromise(position, delayPromise) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({position, delayPromise})\n//         // Fulfill\n//       } else {\n//         reject({position, delayPromise})\n//         // Reject\n//       }\n//     }, delayPromise)\n//   });\n// };\n\nconst form = document.querySelector('.form');\n\n    form.addEventListener('submit', (event) => {\n      event.preventDefault();\n\n      const delay = Number(form.querySelector('input[name=\"delay\"]').value);\n      const state = form.querySelector('input[name=\"state\"]:checked').value;\n\n      const promise = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (state === 'fulfilled') {\n            resolve(delay);\n          } else {\n            reject(delay);\n          }\n        }, delay);\n      });\n\n      promise\n        .then((delay) => {\n          iziToast.success({\n            title: '✅ Fulfilled promise',\n              message: `Затримка: ${delay}мс`,\n            position: \"topRight\",\n          });\n        })\n        .catch((delay) => {\n          iziToast.error({\n            title: '❌ Rejected promise',\n              message: `Затримка: ${delay}мс`,\n            position: \"topRight\",\n          });\n        });\n    });"],"names":["form","event","delay","state","resolve","reject","iziToast"],"mappings":"+EA2EA,MAAMA,EAAO,SAAS,cAAc,OAAO,EAEvCA,EAAK,iBAAiB,SAAWC,GAAU,CACzCA,EAAM,eAAc,EAEpB,MAAMC,EAAQ,OAAOF,EAAK,cAAc,qBAAqB,EAAE,KAAK,EAC9DG,EAAQH,EAAK,cAAc,6BAA6B,EAAE,MAEhD,IAAI,QAAQ,CAACI,EAASC,IAAW,CAC/C,WAAW,IAAM,CACXF,IAAU,YACZC,EAAQF,CAAK,EAEbG,EAAOH,CAAK,CAEf,EAAEA,CAAK,CAChB,CAAO,EAGE,KAAMA,GAAU,CACfI,EAAS,QAAQ,CACf,MAAO,sBACL,QAAS,aAAaJ,CAAK,KAC7B,SAAU,UACtB,CAAW,CACX,CAAS,EACA,MAAOA,GAAU,CAChBI,EAAS,MAAM,CACb,MAAO,qBACL,QAAS,aAAaJ,CAAK,KAC7B,SAAU,UACtB,CAAW,CACX,CAAS,CACT,CAAK"}